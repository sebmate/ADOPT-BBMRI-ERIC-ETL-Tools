package de.fau.med.imi.MDRMatcher;
public class BagOfWordsMatcher {

	private MappingTerm term1;
	private MappingTerm term2;
	private int matchScore;

	private MatchResult result;

	public boolean isNumeric(String s) {
		return s != null && s.matches("-?\\d+(\\.\\d+)?");
	}

	public BagOfWordsMatcher(MappingTerm term1, MappingTerm term2) {

		this.term1 = term1;
		this.term2 = term2;
		this.matchScore = 0;

		result = new MatchResult(term1, term2, matchScore);

	}

	public MatchResult match() {

		int ngram = term1.getWordCount() + 1;

		for (int g = ngram; g > 0; g--) {
			for (int a = 0; a < term1.getGramCount(g); a++) {
				for (int b = 0; b < term2.getGramCount(g); b++) {

					if (term1.getGramWordString(a, g).equals(term2.getGramWordString(b, g))) {

						if (!isNumeric(term1.getGramWordString(a, g))) {
						matchScore = matchScore + 10 ^ (g - 1);
						} else {
							matchScore = matchScore + (g - 1);
						}

					} else {

						if (term1.getGramWordString(a, g).length() > 0 && term2.getGramWordString(b, g).length() > 0) {
							int distance = LevenshteinDistance(term1.getGramWordString(a, g),
									term2.getGramWordString(b, g));

							double ratio = 1 - ((double) distance) / (Math.max(term1.getGramWordString(a, g).length(),
									term2.getGramWordString(b, g).length()));
							if (ratio >= 0.9)
								matchScore = (int) ((matchScore + 10 ^ (g - 1)) * ratio);
						}
					}

					 //System.out.println(term1.getGramWordString(a, g) + " - "
					 //+ term2.getGramWordString(b, g));
				}
			}
		}

		return new MatchResult(term1, term2, matchScore);
	}

	public int LevenshteinDistance(String s0, String s1) {
		int len0 = s0.length() + 1;
		int len1 = s1.length() + 1;

		// the array of distances
		int[] cost = new int[len0];
		int[] newcost = new int[len0];

		// initial cost of skipping prefix in String s0
		for (int i = 0; i < len0; i++)
			cost[i] = i;

		// dynamicaly computing the array of distances

		// transformation cost for each letter in s1
		for (int j = 1; j < len1; j++) {
			// initial cost of skipping prefix in String s1
			newcost[0] = j;

			// transformation cost for each letter in s0
			for (int i = 1; i < len0; i++) {
				// matching current letters in both strings
				int match = (s0.charAt(i - 1) == s1.charAt(j - 1)) ? 0 : 1;

				// computing cost for each transformation
				int cost_replace = cost[i - 1] + match;
				int cost_insert = cost[i] + 1;
				int cost_delete = newcost[i - 1] + 1;

				// keep minimum cost
				newcost[i] = Math.min(Math.min(cost_insert, cost_delete), cost_replace);
			}

			// swap cost/newcost arrays
			int[] swap = cost;
			cost = newcost;
			newcost = swap;
		}

		// the distance is the cost for transforming all letters in both strings
		return cost[len0 - 1];
	}

}
